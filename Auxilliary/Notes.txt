The idea will be to create a .txt file for the data, like the array data and such, and then write at each loop when you have the new data, write it into it, probably just with less sig figs or as a float rather than double as it is calculated (to save space).

There will be a user parameter to set the maximum file size, in MB or GB, so that i don't accidentally make such a super big txt file. Efficiently, this would be calculated beforehand using the number of grid points and time steps, and the program would not run and give an error.

The animation can be done wherever, whether it is unity or maybe a separate project, which uses some graphics library, in the same solution. It does not need all of the txt file, and it does not need to store all of the portion of the txt file that it does need, all at once. It can firstly match to the desired fps the time step points that are actually animated. For the second point, it can predict how long it will take to read part of the txt file, then add a safety factor to that, and only store that span of data ahead at the points where it reads. This is also true with writing. Perhaps writing the new values every time is not the most efficient either, but also store a range at a time so that it does not need to store all the data for all time points at the same time.


Computation speed is one thing. Storing the data is another thing. Practically, you will have to only write a reduced set of data. You can also write the reduced set to an array, for memory, but also maybe try to figure out how to do it for disk. Parallelization comes to mind here, though it is limited. But in the end, you have to store only a smaller number of grid points and a smaller number of time steps.


Organization of the project:
-Utilities (namespace, not class): global utilities
-Simulation abstract class: base class for all simulation types (FDM, FEM, FVM, but also rigid body simulations, contact simulations, uncertainty/probability simulations, shallow wave equations simulations, optical simulations, electromagnetic simulations, other dynamic simulations, etc./also specific simulations with specific models)
-Simulation_FDM class: has all of the parameters and stuff basically to run the simulation, with global variables in unity being members of that class
-Visualization/Playing Simulation base class: Each simulation is a window, base class has basic UI (not technically abstract class, because I want to be able to visualize just it); can play the visual simulation based on any sort of U V P, and containers the user replay and graphical parameters; for now basically a video player, but will be more interactive eventually
    -constructor where you set all the things
    -activate (create window, and play)
    -private draw base UI (at each frame in main) (if active) (potentially we cando different threads in future)
    -play
    -pause
    -deactivate (close window and set false)
-Main file: has int main(), where the intersection lies and you can simulate one or multiple simulations, save these as files, simulate then play, or load files and play

all classes/files except for main() will have header files too, so that you don't have to recompile, but just run, if nothing has changed. This should greatly streamline it and increase speed


For time stepping, use Runge-Kutta Methods instead of forward Euler. Important is teil7 slide 36; shows that for s=3 and above, pure oscillations can be reprresented (imaginary axis partly in stable regime)

Also reread teil8, slides 6-8


Parallelization: I plan to parallelize firstly just running multiple simulations, e.g. if you run 8 seperate, different simulations, and you have 8 processors/core, then you can run them all at once. Of course, with my current storage method, RAM is a limitation, as it is shared.


Name:
-SimuLab
-Phys
-Multi
-Stable
-Converge
-Consistent
-Continuum
-Multi-mechanics and optics simulation environment (MMOSE)
-Integrated Multi-Physics and Optics Simulation Environment (IMPOSE)
-Integrated Multi-Physics Simulation Environment 2-Dimensional (IMPSE2D) <-----------------